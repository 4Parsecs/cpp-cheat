# `make help` for documentation.

-include Makefile_params

# C/CPP
# Don't use the standard names like `CC` and `CXX` to avoid `?=` getting overridden.
# by the Makefile default values.
MYCC			?= gcc
MYCXX			?= g++
CFLAGS			?= -std=c11   -Wall -pedantic-errors -march=native $(CFLAGS_EXTRA)
MYCXXFLAGS		?= -std=c++11 -Wall -pedantic-errors -march=native $(CXXFLAGS_EXTRA)
LIBS			?= -lm #-lGL -lGLU -lglut
INCLUDE_DIRS 	?= #-I/usr/include
DEFINES 		?= #-D_XOPEN_SOURCE 700

# Fortran
FF 		?= gfortran
FFLIBS 	?= #-l:lapack/liblapack.so
FFLAGS 	?= -std=f2003 -Wall -pedantic-errors -march=native $(FFLAGS_EXTRA)

# Paths
IN_DIR 		?= ./
IN_EXTS 	?= .c .cpp .f
# Unlike in Makefile_one, there is no TMP_DIR because there are no .o files generated.
OUT_DIR 	?= _build/
OUT_EXT 	?= #.elf

# Basename without extension of file to run on run target.
RUN 		?= main
# If exists, will be symlinked into the same directory from which the executable will be run.
# This way, the executable can suppose that this file or directory is in the current directory.
RUN_INPUT	?= input
# Allow users to write `make run=name`.
run ?=

ASSEMBLER_NOEXT		?= $(IN_DIR)$(RUN)
DEBUG_DEFINE 		?=
DEBUG_FLAGS  		?=
PROFILE_DEFINE 		?= #-DDEBUG
PROFILE_FLAGS  		?= #
# Should be turned on for production.
# For development leave off to compile faster and produce more predictable assembly code.
OPTIMIZE_FLAGS		?= #-O3

# Extra phony targets
PHONY				?=

RUN_BNAME 	:= $(RUN)$(OUT_EXT)

INS			:= $(foreach IN_EXT, $(IN_EXTS), $(wildcard $(IN_DIR)*$(IN_EXT)))
INS_NODIR 	:= $(notdir $(INS))
OUTS_NODIR	:= $(basename $(INS_NODIR))
OUTS_NODIR	:= $(addsuffix $(OUT_EXT), $(OUTS_NODIR))
OUTS		:= $(addprefix $(OUT_DIR), $(OUTS_NODIR))

.PHONY: all asm set_asm_flags clean debug set_debug_flags help mkdir objdump set_objdump_flags profile set_profile_flags test $(PHONY)

all: mkdir $(OUTS)
	@#TODO ignore errors if not present
	@if [ -e "$(RUN_INPUT)" ] && [ ! -e "$(OUT_DIR)$(RUN_INPUT)" ]; then ln -s ../$(RUN_INPUT) "$(OUT_DIR)$(RUN_INPUT)"; fi
	@-$(MAKE) all-post
ifneq ($(strip $(run)),)
	@echo
	cd $(OUT_DIR) && ./"$(run)"
endif

$(OUT_DIR)%$(OUT_EXT): $(IN_DIR)%.c
	$(MYCC) $(CFLAGS)    $(PROFILE_DEFINE) $(PROFILE_FLAGS) $(DEBUG_DEFINE) $(DEBUG_FLAGS) $(OPTIMIZE_FLAGS) $(INCLUDE_DIRS) -o "$@" "$<" $(LIBS)

$(OUT_DIR)%$(OUT_EXT): $(IN_DIR)%.cpp
	$(MYCXX) $(MYCXXFLAGS) $(PROFILE_DEFINE) $(PROFILE_FLAGS) $(DEBUG_DEFINE) $(DEBUG_FLAGS) $(OPTIMIZE_FLAGS) $(INCLUDE_DIRS) -o "$@" "$<" $(LIBS)

$(OUT_DIR)%$(OUT_EXT): $(IN_DIR)%.f
	$(FF) $(FFLAGS) $(PROFILE_DEFINE) $(PROFILE_FLAGS) $(DEBUG_DEFINE) $(DEBUG_FLAGS) $(OPTIMIZE_FLAGS) -o "$@" "$<" $(FFLIBS)

# Make assembly intermingled with original C code to stdout>
# TODO0: how not to rewrite the make rules?
# For bare asm: $(MYCC) $(PROFILE_DEFINE) $(PROFILE_FLAGS) $(DEBUG_DEFINE) $(DEBUG_FLAGS) $(OPTIMIZE_FLAGS) $(CFLAGS) -fverbose-asm -S "$(ASSEMBLER_NOEXT)$$EXT"
asm: mkdir set_asm_flags
	for EXT in $(IN_EXTS); do \
		if [ -f "$(ASSEMBLER_NOEXT)$$EXT" ]; then \
			case "$$EXT" in \
				.c)\
					$(MYCC) $(PROFILE_DEFINE) $(PROFILE_FLAGS) $(DEBUG_DEFINE) $(DEBUG_FLAGS) $(OPTIMIZE_FLAGS) $(CFLAGS) -c -fverbose-asm -Wa,-adhln "$(ASSEMBLER_NOEXT)$$EXT" $(LIBS) -o $(OUT_DIR)asm.o\
					;;\
				.cpp)\
					$(MYCXX) $(MYCXXFLAGS) $(PROFILE_DEFINE) $(PROFILE_FLAGS) $(DEBUG_DEFINE) $(DEBUG_FLAGS) $(OPTIMIZE_FLAGS) -c -fverbose-asm -Wa,-adhln "$(ASSEMBLER_NOEXT)$$EXT" $(LIBS)\
					;;\
				.f)\
					;;\
			esac;\
			break;\
		fi;\
	done

set_asm_flags:
	$(eval OPTIMIZE_FLAGS :=)
	$(eval DEBUG_FLAGS := -ggdb3)

clean:
	rm -rf "$(OUT_DIR)"

debug: clean set_debug_flags all
	cd $(OUT_DIR) && gdb "$(RUN_BNAME)"

set_debug_flags:
	$(eval DEBUG_FLAGS := -ggdb3)
	$(eval DEBUG_DEFINE := -DDEBUG)
	$(eval OPTIMIZE_FLAGS := -O0)

mkdir:
	@mkdir -p "$(OUT_DIR)"

objdump: mkdir set_objdump_flags all
	cd $(OUT_DIR) && objdump -S $(RUN_BNAME)

set_objdump_flags:
	$(eval OPTIMIZE_FLAGS := -O0)
	$(eval DEBUG_FLAGS := -ggdb3)

profile: clean set_profile_flags all run
	cd $(OUT_DIR) && gprof -b $(RUN_BNAME) gmon.out | tee "$(RUN_BNAME).profile_out" | less

run: all
	@echo
	cd $(OUT_DIR) && ./$(RUN_BNAME)

set_profile_flags:
	$(eval PROFILE_FLAGS := -p -pg)
	$(eval PROFILE_DEFINE := -DPROFILE)
	#$(eval OPTIMIZE_FLAGS := -O0)

test: all
	@echo
	./test $(OUT_DIR) $(OUTS_NODIR)

-include Makefile_targets

help:
	@echo 'Compiles C files with GCC, and C++ files with g++, Fortran files with gfortran one by one separatelly.'
	@echo ''
	@echo 'Executables have the same name without extension as the file that originated it:'
	@echo ''
	@echo '    c.c -> c'
	@echo '    cpp.c -> cpp'
	@echo '    fortran.f -> fortran'
	@echo ''
	@echo 'Therefore dont use files with the same basename without extension: e.g. `main.c` and `main.cpp`.'
	@echo ''
	@echo '# Most useful invocations'
	@echo ''
	@echo 'Build all:'
	@echo ''
	@echo '    make'
	@echo ''
	@echo 'Build and run output with the default basename:'
	@echo ''
	@echo '    make run'
	@echo ''
	@echo 'Build and run output with given basename:'
	@echo ''
	@echo '    make run=c'
	@echo ''
	@echo 'The `=` sign is *not* optional.'
	@echo ''
	@echo '# Targets'
	@echo ''
	@echo 'all ................. Build all.'
	@echo 'asm [RUN=name] ...... Print generated assembly code for the file with given basename without extension.'
	@echo 'clean ............... Clean built files.'
	@echo 'debug ............... Run with `gdb`.'
	@echo 'help ................ Print help to stdout.'
	@echo 'profile ............. Run with `gprof`.'
	@echo 'run[=name] .......... Run a file with the given basename withotu extension or the default not given.'
	@echo 'test ................ Run `./test <output-directory> <output-basename> ...`'
