#compiles c files with gcc and c++ files with g++, one by one separatelly

#this is mostly for test purposes. see: ``makefile.individual_out_bins`` for a more complete makefile

#c/cpp
override CC				?= gcc
override CXX			?= g++
override CFLAGS		?= -Wall -std=c99 -pedantic-errors
override CXXFLAGS	?= -Wall -std=c++0x -pedantic-errors
override LIBS			?= #-lm -lGL -lGLU -lglut
override DEFINES 	?= #-DPOSIX

#fortran
override FF ?= gfortran
override FFLIBS ?= #-l:lapack/liblapack.so
override FFLAGS ?= -Wall -march=native -std=f95 -pedantic-errors

#paths
override IN_DIR 	?= ./
override IN_EXTS 	?= .c .cpp .f
override OUT_DIR 	?= _out/
override OUT_EXT 	?= .elf

#run
override RUN ?= c			#basename without extension of file to run

override ASSEMBLER_BASENAME ?= c.c
override ASSEMBLE_EXT 			?= .c
override DEBUG_DEFINE 			?=
override DEBUG_FLAGS  			?=
override PROFILE_DEFINE 		?= #-DDEBUG
override PROFILE_FLAGS  		?= #
override OPTIMIZE_FLAGS			?= #-O3

RUN_BNAME 	:= $(RUN)$(OUT_EXT)

INS 				:= $(foreach IN_EXT, $(IN_EXTS), $(wildcard $(IN_DIR)*$(IN_EXT)) )
INS_NODIR 	:= $(notdir $(INS))
OUTS_NODIR	:= $(patsubst %$(IN_EXT),%$(OUT_EXT),$(INS_NODIR))
OUTS				:= $(addprefix $(OUT_DIR),$(OUTS_NODIR))

.PHONY: all mkdir clean install ubuntu_install_deps

all: mkdir $(OUTS)

ubuntu_install_deps:
	#sudo aptitude install -y libgtk-3-dev

mkdir:
	mkdir -p "$(OUT_DIR)"

$(OUT_DIR)%$(OUT_EXT): $(IN_DIR)%.c
	$(CC) $(CFLAGS) -o "$@" "$<" $(LIBS)

$(OUT_DIR)%$(OUT_EXT): $(IN_DIR)%.cpp
	$(CXX) $(CXXFLAGS) -o "$@" "$<" $(LIBS)

$(OUT_DIR)%$(OUT_EXT): $(IN_DIR)%.f
	$(FF) $(OPTIMIZE_FLAGS) $(FFLAGS) -o "$@" "$<" $(FFLIBS)

run: all
	( cd $(OUT_DIR) && ./$(RUN_BNAME) ) #run from out dir

assembler: mkdir $(IN_DIR)$(ASSEMBLER_BASENAME)
	$(eval override OPTIMIZE_FLAGS := -O0)
	$(CC) $(PROFILE_DEFINE) $(PROFILE_FLAGS) $(DEBUG_DEFINE) $(DEBUG_FLAGS) $(OPTIMIZE_FLAGS) $(CFLAGS) -S "$(IN_DIR)$(ASSEMBLE_BASENAME)" -o "$(OUT_DIR)$(ASSEMBLE_BASENAME).s"

debug: clean set_debug_flags all
	( cd $(OUT_DIR) && gdb "$(RUN_BNAME)" )

set_debug_flags:
	$(eval override DEBUG_FLAGS := -ggdb3)
	$(eval override DEBUG_DEFINE := -DDEBUG)
	$(eval override OPTIMIZE_FLAGS := -O0)

profile: clean set_profile_flags all run
	( cd $(OUT_DIR) && gprof -b $(RUN_BNAME) gmon.out | tee "$(RUN_BNAME).profile_out" | less )

set_profile_flags:
	$(eval override PROFILE_FLAGS := -p -pg)
	$(eval override PROFILE_DEFINE := -DPROFILE)
	#$(eval override OPTIMIZE_FLAGS := -O0)

run: all
	( cd $(OUT_DIR) && ./$(RUN_BNAME) ) #run from out dir

clean:
	rm -rf "$(OUT_DIR)"

help:
	@echo 'sample invocations:'
	@echo '  ubuntu_install_deps'
	@echo '    #installs dependencies on Ubuntu'
	@echo '  make'
	@echo '  make clean'
	@echo '  make run'
	@echo '    #makes then runs output'
	@echo '  make debug'
	@echo '    #makes with -DDEBUG and -ggdb3'
	@echo '    #and runs with gdb -b'
	@echo '  make profile'
	@echo '    #clean, make with -DPROFILE and -p -pg'
	@echo '    #runs and pipes output through less'
	@echo '    #and saves compile output to <outname>.profile_out'
