#compiles c files with gcc and c++ files with g++, one by one separatelly

override CC?=gcc
override CXX?=g++
override CFLAGS?=-Wall -Wno-unused-variable -Wno-unused-but-set-variable
override CXXFLAGS?=-Wall -Wno-unused-variable -Wno-unused-but-set-variable
override LIBS?=
override IN_DIR?=./
override OUT_DIR?=_out/
override OUT_EXT?=.out
override RUN?=c
#override RUN?=func
#override RUN?=cpp

INS:=$(wildcard $(IN_DIR)*.c)
INS_NODIR:=$(notdir $(INS))
OUTS_NODIR:=$(patsubst %.c,%$(OUT_EXT),$(INS_NODIR))
C_OUTS:=$(addprefix $(OUT_DIR),$(OUTS_NODIR))

INS:=$(wildcard $(IN_DIR)*.cpp)
INS_NODIR:=$(notdir $(INS))
OUTS_NODIR:=$(patsubst %.cpp,%$(OUT_EXT),$(INS_NODIR))
CPP_OUTS:=$(addprefix $(OUT_DIR),$(OUTS_NODIR))

#default basename without extension to run if RUN not given at command line
#make run
#make run RUN=cpp

.PHONY: all mkdir clean

all: mkdir $(C_OUTS) $(CPP_OUTS)

run: all
	./$(OUT_DIR)$(RUN)$(OUT_EXT) $(RUN_ARGS)

mkdir:
	mkdir -p "$(OUT_DIR)"

$(OUT_DIR)%$(OUT_EXT): $(IN_DIR)%.c
	$(CC) $(CFLAGS) -o "$@" "$<" $(LIBS)

$(OUT_DIR)%$(OUT_EXT): $(IN_DIR)%.cpp
	$(CXX) $(CXXFLAGS) -o "$@" "$<" $(LIBS)

clean:
	rm -rf "$(OUT_DIR)"
