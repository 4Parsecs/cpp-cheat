#compiles c files with gcc and c++ files with g++, one by one separatelly

#this is mostly for test purposes. see: ``makefile.individual_out_bins`` for a more complete makefile

-include makefile_params

#c/cpp
CC			?= gcc
CXX			?= g++
CFLAGS		?= -std=c11   -Wall -pedantic-errors -march=native $(CFLAGS_EXTRA)
CXXFLAGS	?= -std=c++11 -Wall -pedantic-errors -march=native $(CXXFLAGS_EXTRA)
LIBS		?= -lm #-lGL -lGLU -lglut
DEFINES 	?= #-D_XOPEN_SOURCE 700

#fortran
FF 		?= gfortran
FFLIBS 	?= #-l:lapack/liblapack.so
FFLAGS 	?= -std=f2003 -Wall -pedantic-errors -march=native $(FFLAGS_EXTRA)

#paths
IN_DIR 		?= ./
IN_EXTS 	?= .c .cpp .f
OUT_DIR 	?= _out/
OUT_EXT 	?= #.elf

#basename without extension of file to run
RUN ?= main

ASSEMBLER_NOEXT		?= $(IN_DIR)$(RUN)

DEBUG_DEFINE 		?=
DEBUG_FLAGS  		?=
PROFILE_DEFINE 		?= #-DDEBUG
PROFILE_FLAGS  		?= #
OPTIMIZE_FLAGS		?= -O3

#extra phony targets
PHONY				?=

RUN_BNAME 	:= $(RUN)$(OUT_EXT)

INS			:= $(foreach IN_EXT, $(IN_EXTS), $(wildcard $(IN_DIR)*$(IN_EXT)))
INS_NODIR 	:= $(notdir $(INS))
OUTS_NODIR	:= $(basename $(INS_NODIR))
OUTS_NODIR	:= $(addsuffix $(OUT_EXT), $(OUTS_NODIR))
OUTS		:= $(addprefix $(OUT_DIR), $(OUTS_NODIR))

.PHONY: all asm set_asm_flags clean debug set_debug_flags help mkdir objdump set_objdump_flags profile set_profile_flags $(PHONY)

all: mkdir $(OUTS)

$(OUT_DIR)%$(OUT_EXT): $(IN_DIR)%.c
	$(CC) $(CFLAGS) $(PROFILE_DEFINE) $(PROFILE_FLAGS) $(DEBUG_DEFINE) $(DEBUG_FLAGS) $(OPTIMIZE_FLAGS) -o "$@" "$<" $(LIBS)

$(OUT_DIR)%$(OUT_EXT): $(IN_DIR)%.cpp
	$(CXX) $(CXXFLAGS) $(PROFILE_DEFINE) $(PROFILE_FLAGS) $(DEBUG_DEFINE) $(DEBUG_FLAGS) $(OPTIMIZE_FLAGS) -o "$@" "$<" $(LIBS)

$(OUT_DIR)%$(OUT_EXT): $(IN_DIR)%.f
	$(FF) $(FFLAGS) $(PROFILE_DEFINE) $(PROFILE_FLAGS) $(DEBUG_DEFINE) $(DEBUG_FLAGS) $(OPTIMIZE_FLAGS) -o "$@" "$<" $(FFLIBS)

#make assembly intermingled with original c code to stdout
#TODO0: how not to rewrite the make rules?
#for bare asm: $(CC) $(PROFILE_DEFINE) $(PROFILE_FLAGS) $(DEBUG_DEFINE) $(DEBUG_FLAGS) $(OPTIMIZE_FLAGS) $(CFLAGS) -fverbose-asm -S "$(ASSEMBLER_NOEXT)$$EXT"
asm: mkdir set_asm_flags
	for EXT in $(IN_EXTS); do \
		if [ -f "$(ASSEMBLER_NOEXT)$$EXT" ]; then \
			case "$$EXT" in \
				.c)\
					$(CC) $(PROFILE_DEFINE) $(PROFILE_FLAGS) $(DEBUG_DEFINE) $(DEBUG_FLAGS) $(OPTIMIZE_FLAGS) $(CFLAGS) -c -fverbose-asm -Wa,-adhln "$(ASSEMBLER_NOEXT)$$EXT" \
					;;\
				.cpp)\
					;;\
				.f)\
					;;\
			esac;\
			break;\
		fi;\
	done

set_asm_flags:
	$(eval OPTIMIZE_FLAGS := -O3)
	$(eval DEBUG_FLAGS := -ggdb3)

clean:
	rm -rf "$(OUT_DIR)"

debug: clean set_debug_flags all
	cd $(OUT_DIR) && gdb "$(RUN_BNAME)"

set_debug_flags:
	$(eval DEBUG_FLAGS := -ggdb3)
	$(eval DEBUG_DEFINE := -DDEBUG)
	$(eval OPTIMIZE_FLAGS := -O0)

mkdir:
	mkdir -p "$(OUT_DIR)"

#
objdump: mkdir set_objdump_flags all
	cd $(OUT_DIR) && objdump -S $(RUN_BNAME)

set_objdump_flags:
	$(eval OPTIMIZE_FLAGS := -O0)
	$(eval DEBUG_FLAGS := -ggdb3)

profile: clean set_profile_flags all run
	cd $(OUT_DIR) && gprof -b $(RUN_BNAME) gmon.out | tee "$(RUN_BNAME).profile_out" | less

run: all
	cd $(OUT_DIR) && ./$(RUN_BNAME) #run from out dir

set_profile_flags:
	$(eval PROFILE_FLAGS := -p -pg)
	$(eval PROFILE_DEFINE := -DPROFILE)
	#$(eval OPTIMIZE_FLAGS := -O0)

-include makefile_targets
